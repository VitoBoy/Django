

访问
没登录情况: http://127.0.0.1:8080/index/ ===>login.html
登录情况: http://127.0.0.1:8080/index/ ==> index.html

http无状态协议

解决办法:
	`cookie + session

令牌:
1.注册
2.登录成功(给一个标识符)
3.访问任何的路由,先校验你的标识符是否正确,如果正确则放行。如果标识符不正确,则不让访问



#登录与注册的实现
1.注册
def register(request):
    if request.method == 'GET':
        return render(request,'register.html')
    if request.method == 'POST':
        # 用于创建用户
        name = request.POST.get('u_name')
        password = request.POST.get('u_pwd')
        password2 = request.POST.get('u_pwd2')
        # 2.校验参数是否完整
        if not all([name, password, password2]):
            msg = '请填写完整的参数'
            return render(request, 'register.html', {'msg':msg})
        # 3.先判断数据库中是否存在name用户
        if User.objects.filter(name=name).first():
            msg = '该账户以注册，请去登录'
            return render(request,'register.html',{'msg':msg})

        # 4.校验密码是否一致
        if password2 != password:
            msg = '密码不一致'
            return render(request,'register.html',{'msg':msg})
        # 5.注册
        User.objects.create(name=name, password=password)
        return HttpResponseRedirect(reverse('user:login'))
#base.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>
        {% block title %}
        {% endblock %}
    </title>
</head>
<body>
    {% block content %}
    {% endblock %}

</body>
</html>







#register.html---注册页面，继承了base.html页面
{% extends 'base.html' %}

{% block content %}
    <form action="" method="post">
        姓名:<input type="text" name="u_name">
        密码:<input type="password" name="u_pwd">
        确认密码:<input type="password" name="u_pwd2">
        <input type="submit" value="提交">
    </form>
    <p>{{ msg }}</p>

{% endblock %}


#login.html---注册页面，继承了base.html页面
{% extends 'base.html' %}

{% block content %}
    <form action="" method="post">
        姓名:<input type="text" name="u_name">
        密码:<input type="password" name="u_pwd">
        <input type="submit" value="提交">
    </form>
    <p>{{ msg }}</p>
{% endblock %}








#index.html---登录成功后返回的页面
{% extends 'base.html' %}

{% block content %}
    <p>你好，世界</p>
    <a href="{% url 'user:logout'%}">注销</a>
{% endblock %}







#注册
def login(request):
    if request.method == 'GET':
        return render(request, 'login.html')

    if request.method == 'POST':
        # 1.获取参数
        name = request.POST.get('u_name')
        password = request.POST.get('u_pwd')
        # 2.数据完整性
        if not all([name, password]):
            msg = '请填写完整的登录信息'
            return render(request, 'login.html', {'msg':msg})
        # 3.验证用户是否注册
        user = User.objects.filter(name=name).first()
        if not user:
            msg = '该账户没有注册,请去注册'
            return render(request, 'login.htm',{'msg':msg})

        # 4.校验密码
        if password != user.password:
            msg = '密码不正确'
            return render(request, 'login.html', {'msg':msg})

        # 重点
        # 请求: 请求是从浏览器发送请求的时候,传递给后端的
        # 响应: 后端返回给浏览器的
        res = HttpResponseRedirect(reverse('user:index'))
        # set_cookie
        token=''
        s='123456578458fheuhuhruhhhf'
        for i in range(25):
            token +=random.choice(s)
        res.set_cookie('token', token, max_age=6000)

        # 存token值
        user_token = UserToken.objects.filter(user=user).first()
        if not user_token:
            UserToken.objects.create(token=token, user=user)
        else:
            user_token.token = token
            user_token.save()

        return res



# 定义登录验证的装饰器
# 闭包三个条件
# 1.外层函数套内层函数
# 2.内层函数调用外层函数的参数
# 3.外层函数返回内层函数
def login_required(func):
    def check_login(request):
        token = request.COOKIES.get('token')
        if not token:
            return HttpResponseRedirect(reverse('user:login'))
        user_token = UserToken.objects.filter(token=token).first()
        if not user_token:
            return HttpResponseRedirect(reverse('user:login'))
        return func(request)
    return check_login



#登录成功
@login_required---装饰器
def index(request):
    if request.method == 'GET':
        # token = request.COOKIES.get('token')
        # # 查询标识符是否有效
        # user_token = UserToken.objects.filter(token=token).first()
        # if not user_token:
        #     # 查询不到信息,说明用户没登录
        #     return HttpResponseRedirect(reverse('user:login'))
        return render(request, 'index.html')


#注销
@login_required
def logout(request):
    if request.method == 'GET':
        # 1.删除浏览器中的cookie参数
        res = HttpResponseRedirect(reverse('user:login'))
        res.delete_cookie('token')

        # 2.删除UserToken中的数据
        token = request.COOKIES.get('token')
        UserToken.objects.filter(token=token).delete()

        return res




